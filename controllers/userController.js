exports.getUserRole = async (req, res) => {
    const { initData } = req.body;

    console.log('üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å getUserRole —Å initData:', initData);

    if (!initData) {
        console.log('‚õî initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        return res.json({ success: false, error: 'initData missing' });
    }

    const valid = isValid(initData, BOT_TOKEN);
    if (!valid) {
        console.log('‚õî initData –Ω–µ–≤–∞–ª–∏–¥–µ–Ω');
        return res.json({ success: false, error: 'Invalid initData' });
    }

    const user = parse(initData).user;
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ initData:', user);

    try {
        const staffResult = await pool.query('SELECT * FROM staff WHERE user_id = $1', [user.id]);

        if (staffResult.rows.length > 0) {
            console.log('üëî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫');
            return res.json({ success: true, role: 'staff' });
        }

        console.log('üôã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º');
        return res.json({ success: true, role: 'client' });

    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', e);
        return res.json({ success: false, error: e.message });
    }
};

const { isValid, parse } = require('@telegram-apps/init-data-node');
const pool = require('../db/pool');
const BOT_TOKEN = process.env.BOT_TOKEN;


exports.getStaffBookings = async (req, res) => {
    console.log('üì• /api/getStaffBookings –≤—ã–∑–≤–∞–Ω');
    const { initData } = req.body;

    if (!initData) {
        console.log('‚ùå initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞');
        return res.json({ success: false, error: 'initData missing' });
    }

    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ initData...');
    const valid = isValid(initData, BOT_TOKEN);
    if (!valid) {
        console.log('‚ùå initData –Ω–µ–≤–∞–ª–∏–¥–µ–Ω');
        return res.json({ success: false, error: 'Invalid initData' });
    }

    let user;
    try {
        user = parse(initData).user;
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω:', user);
    } catch (e) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ initData:', e);
        return res.json({ success: false, error: 'Parse initData error' });
    }

    try {
        console.log(`üîç –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å user_id = ${user.id} –≤ —Ç–∞–±–ª–∏—Ü–µ staff...`);
        const staffResult = await pool.query(`
      SELECT * FROM staff WHERE user_id = $1
    `, [user.id]);

        if (staffResult.rows.length === 0) {
            console.log('‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ staff');
            return res.json({ success: false, error: 'Staff not found' });
        }

        const placeId = staffResult.rows[0].place_id;
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫. place_id = ${placeId}`);

        console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è place_id = ${placeId}...`);
        const bookingsResult = await pool.query(`
      SELECT
        a.appointment_id,
        a.date,
        a.time,
        a.client_name,
        STRING_AGG(s.name, ', ') AS services_names
      FROM appointments a
      LEFT JOIN appointment_services aps ON a.appointment_id = aps.appointment_id
      LEFT JOIN services s ON aps.service_id = s.service_id
      WHERE a.place_id = $1
      GROUP BY a.appointment_id
      ORDER BY a.date, a.time
    `, [placeId]);

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${bookingsResult.rows.length}`);
        // –ú–æ–∂–Ω–æ –µ—â–µ –≤—ã–≤–µ—Å—Ç–∏ —Å–∞–º–∏ –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ –Ω–µ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ:
        console.log('–ó–∞–ø–∏—Å–∏:', bookingsResult.rows);

        return res.json({ success: true, bookings: bookingsResult.rows });

    } catch (e) {
        console.error('üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', e.message, '\n', e.stack);
        return res.json({ success: false, error: e.message });
    }

};


