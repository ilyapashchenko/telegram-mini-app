exports.getUserRole = async (req, res) => {
    const { initData } = req.body;

    console.log('üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å getUserRole —Å initData:', initData);

    if (!initData) {
        console.log('‚õî initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        return res.json({ success: false, error: 'initData missing' });
    }

    const valid = isValid(initData, BOT_TOKEN);
    if (!valid) {
        console.log('‚õî initData –Ω–µ–≤–∞–ª–∏–¥–µ–Ω');
        return res.json({ success: false, error: 'Invalid initData' });
    }

    const user = parse(initData).user;
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ initData:', user);

    try {
        const staffResult = await pool.query('SELECT * FROM staff WHERE user_id = $1', [user.id]);

        if (staffResult.rows.length > 0) {
            console.log('üëî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫');
            return res.json({ success: true, role: 'staff' });
        }

        console.log('üôã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º');
        return res.json({ success: true, role: 'client' });

    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', e);
        return res.json({ success: false, error: e.message });
    }
};

const { isValid, parse } = require('@telegram-apps/init-data-node');
const pool = require('../db/pool');
const BOT_TOKEN = process.env.BOT_TOKEN;


exports.getStaffBookings = async (req, res) => {
    const { initData } = req.body;

    if (!initData) {
        return res.json({ success: false, error: 'initData missing' });
    }

    const valid = isValid(initData, BOT_TOKEN);
    if (!valid) {
        return res.json({ success: false, error: 'Invalid initData' });
    }

    const user = parse(initData).user;

    try {
        // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        const staffResult = await pool.query(`
      SELECT * FROM staff WHERE user_id = $1
    `, [user.id]);

        if (staffResult.rows.length === 0) {
            return res.json({ success: false, error: 'Staff not found' });
        }

        const placeId = staffResult.rows[0].place_id;

        // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ —ç—Ç–æ–º—É –º–µ—Å—Ç—É
        const bookingsResult = await pool.query(`
      SELECT
        a.appointment_id,
        a.date,
        a.time,
        a.client_name,
        STRING_AGG(s.name, ', ') AS services_names
      FROM appointments a
      LEFT JOIN appointment_services aps ON a.appointment_id = aps.appointment_id
      LEFT JOIN services s ON aps.service_id = s.service_id
      WHERE a.place_id = $1
      GROUP BY a.appointment_id, a.date, a.time, a.client_name
      ORDER BY a.date, a.time
    `, [placeId]);

        return res.json({ success: true, bookings: bookingsResult.rows });

    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', e);
        return res.json({ success: false, error: 'Database error' });
    }
};

