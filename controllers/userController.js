exports.getUserRole = async (req, res) => {
    const { initData } = req.body;

    console.log('üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å getUserRole —Å initData:', initData);

    if (!initData) {
        console.log('‚õî initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        return res.json({ success: false, error: 'initData missing' });
    }

    const valid = isValid(initData, BOT_TOKEN);
    if (!valid) {
        console.log('‚õî initData –Ω–µ–≤–∞–ª–∏–¥–µ–Ω');
        return res.json({ success: false, error: 'Invalid initData' });
    }

    const user = parse(initData).user;
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ initData:', user);

    try {
        const staffResult = await pool.query('SELECT * FROM staff WHERE user_id = $1', [user.id]);

        if (staffResult.rows.length > 0) {
            console.log('üëî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫');
            return res.json({ success: true, role: 'staff' });
        }

        console.log('üôã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º');
        return res.json({ success: true, role: 'client' });

    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', e);
        return res.json({ success: false, error: e.message });
    }
};
