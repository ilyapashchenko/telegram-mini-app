// controllers/bookingController.js
// –ö–û–ù–°–¢–ê–ù–¢–´
const pool = require('../db/pool');
const { isValid, parse } = require('@telegram-apps/init-data-node');
const BOT_TOKEN = process.env.BOT_TOKEN;





async function getFreeSlots(req, res) {
    console.log('üîß –ó–∞–ø—Ä–æ—Å –Ω–∞ /getFreeSlots', req.body);

    const { masterId, date, duration } = req.body;

    if (!masterId || !date || !duration) {
        return res.status(400).json({ success: false, error: 'Missing data' });
    }

    try {
        // 1. –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –º–∞—Å—Ç–µ—Ä–∞ (–º–æ–∂–Ω–æ –∑–∞—Ö–∞—Ä–¥–∫–æ–¥–∏—Ç—å –¥–ª—è MVP)
        const startTime = 10 * 60; // 10:00 –≤ –º–∏–Ω—É—Ç–∞—Ö
        const endTime = 20 * 60; // 20:00

        // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —É –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
        const result = await pool.query(`
      SELECT time, duration FROM appointments
      WHERE master_id = $1 AND date = $2
    `, [masterId, date]);

        const busySlots = result.rows.map(row => {
            const [hours, minutes] = row.time.split(':').map(Number);
            const start = hours * 60 + minutes;
            const end = start + row.duration;
            return { start, end };
        });

        // 3. –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        const freeSlots = [];
        for (let time = startTime; time + duration <= endTime; time += 15) {
            const overlaps = busySlots.some(slot =>
                time < slot.end && (time + duration) > slot.start
            );
            if (!overlaps) {
                const hours = Math.floor(time / 60).toString().padStart(2, '0');
                const minutes = (time % 60).toString().padStart(2, '0');
                freeSlots.push(`${hours}:${minutes}`);
            }
        }

        res.json({ success: true, slots: freeSlots });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤:', error);
        res.status(500).json({ success: false, error: 'Database error' });
    }
}

function extractTelegramUserId(initData) {
    const valid = isValid(initData, BOT_TOKEN);
    if (!valid) {
        throw new Error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π initData');
    }
    const user = parse(initData).user;
    return user.id;
}


// –°–ï–†–í–ï–†–ù–ê–Ø –†–£–ß–ö–ê –î–õ–Ø –ó–ê–ü–ò–°–ò

async function createBooking(req, res) {
    console.log('üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏');

    try {
        const { initData, masterId, date, time, services } = req.body;

        console.log('üîç –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', { masterId, date, time, services });

        if (!initData || !masterId || !date || !time || !services || services.length === 0) {
            return res.status(400).json({ success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
        }

        // üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ initData
        const valid = isValid(initData, BOT_TOKEN);
        if (!valid) {
            return res.status(401).json({ success: false, error: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π initData' });
        }

        const user = parse(initData).user;
        const clientId = user.id;

        // üîé –ü–æ–ª—É—á–∞–µ–º place_id –ø–æ masterId
        const placeResult = await pool.query(
            `SELECT place_id FROM masters WHERE master_id = $1`,
            [masterId]
        );

        if (placeResult.rows.length === 0) {
            return res.status(400).json({ success: false, error: '–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const placeId = placeResult.rows[0].place_id;

        const totalDuration = services.reduce((sum, s) => sum + s.duration, 0);

        // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏ –ø–æ–ª—É—á–∞–µ–º appointment_id
        const insertAppointment = await pool.query(
            `INSERT INTO appointments (master_id, place_id, date, time, duration, client_id)
             VALUES ($1, $2, $3, $4, $5, $6) RETURNING appointment_id`,
            [masterId, placeId, date, time, totalDuration, clientId]
        );

        const appointmentId = insertAppointment.rows[0].appointment_id;

        // üîÅ –í—Å—Ç–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ –≤ appointment_services
        for (const service of services) {
            await pool.query(
                `INSERT INTO appointment_services (appointment_id, service_id)
                 VALUES ($1, $2)`,
                [appointmentId, service.id]
            );
        }

        res.json({ success: true });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
}















// –ü–û–î–ì–†–£–ó–ö–ê –ó–ê–ü–ò–°–ï–ô –í–û –í–¢–û–†–û–ú –û–ö–ù–ï
async function getUserBookings(req, res) {
    const { initData } = req.body;

    if (!initData) {
        return res.status(400).json({ success: false, error: 'initData is required' });
    }

    try {
        const tgUserId = extractTelegramUserId(initData);

        const result = await pool.query(`
  SELECT 
  a.date, 
  a.time, 
  a.client_name, 
  s.name AS service_name
FROM appointments a
JOIN appointment_services aps ON aps.appointment_id = a.appointment_id
JOIN services s ON s.service_id = aps.service_id
WHERE a.place_id = $1
ORDER BY a.date, a.time;

`, [tgUserId]);


        res.json({ success: true, bookings: result.rows });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
}







module.exports = { getFreeSlots, createBooking, getUserBookings };
